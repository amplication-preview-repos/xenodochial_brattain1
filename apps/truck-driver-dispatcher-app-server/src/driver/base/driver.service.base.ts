/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Driver as PrismaDriver,
  ComplianceDocument as PrismaComplianceDocument,
  LoadOffer as PrismaLoadOffer,
  Message as PrismaMessage,
  Notification as PrismaNotification,
  Payment as PrismaPayment,
} from "@prisma/client";

export class DriverServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DriverCountArgs, "select">): Promise<number> {
    return this.prisma.driver.count(args);
  }

  async drivers(args: Prisma.DriverFindManyArgs): Promise<PrismaDriver[]> {
    return this.prisma.driver.findMany(args);
  }
  async driver(
    args: Prisma.DriverFindUniqueArgs
  ): Promise<PrismaDriver | null> {
    return this.prisma.driver.findUnique(args);
  }
  async createDriver(args: Prisma.DriverCreateArgs): Promise<PrismaDriver> {
    return this.prisma.driver.create(args);
  }
  async updateDriver(args: Prisma.DriverUpdateArgs): Promise<PrismaDriver> {
    return this.prisma.driver.update(args);
  }
  async deleteDriver(args: Prisma.DriverDeleteArgs): Promise<PrismaDriver> {
    return this.prisma.driver.delete(args);
  }

  async findComplianceDocuments(
    parentId: string,
    args: Prisma.ComplianceDocumentFindManyArgs
  ): Promise<PrismaComplianceDocument[]> {
    return this.prisma.driver
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .complianceDocuments(args);
  }

  async findLoadOffers(
    parentId: string,
    args: Prisma.LoadOfferFindManyArgs
  ): Promise<PrismaLoadOffer[]> {
    return this.prisma.driver
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loadOffers(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.driver
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.driver
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.driver
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
