/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Dispatcher } from "./Dispatcher";
import { DispatcherCountArgs } from "./DispatcherCountArgs";
import { DispatcherFindManyArgs } from "./DispatcherFindManyArgs";
import { DispatcherFindUniqueArgs } from "./DispatcherFindUniqueArgs";
import { CreateDispatcherArgs } from "./CreateDispatcherArgs";
import { UpdateDispatcherArgs } from "./UpdateDispatcherArgs";
import { DeleteDispatcherArgs } from "./DeleteDispatcherArgs";
import { ComplianceDocumentFindManyArgs } from "../../complianceDocument/base/ComplianceDocumentFindManyArgs";
import { ComplianceDocument } from "../../complianceDocument/base/ComplianceDocument";
import { LoadOfferFindManyArgs } from "../../loadOffer/base/LoadOfferFindManyArgs";
import { LoadOffer } from "../../loadOffer/base/LoadOffer";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { DispatcherService } from "../dispatcher.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Dispatcher)
export class DispatcherResolverBase {
  constructor(
    protected readonly service: DispatcherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "read",
    possession: "any",
  })
  async _dispatchersMeta(
    @graphql.Args() args: DispatcherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Dispatcher])
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "read",
    possession: "any",
  })
  async dispatchers(
    @graphql.Args() args: DispatcherFindManyArgs
  ): Promise<Dispatcher[]> {
    return this.service.dispatchers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Dispatcher, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "read",
    possession: "own",
  })
  async dispatcher(
    @graphql.Args() args: DispatcherFindUniqueArgs
  ): Promise<Dispatcher | null> {
    const result = await this.service.dispatcher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dispatcher)
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "create",
    possession: "any",
  })
  async createDispatcher(
    @graphql.Args() args: CreateDispatcherArgs
  ): Promise<Dispatcher> {
    return await this.service.createDispatcher({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dispatcher)
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async updateDispatcher(
    @graphql.Args() args: UpdateDispatcherArgs
  ): Promise<Dispatcher | null> {
    try {
      return await this.service.updateDispatcher({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dispatcher)
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "delete",
    possession: "any",
  })
  async deleteDispatcher(
    @graphql.Args() args: DeleteDispatcherArgs
  ): Promise<Dispatcher | null> {
    try {
      return await this.service.deleteDispatcher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComplianceDocument], {
    name: "complianceDocuments",
  })
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "read",
    possession: "any",
  })
  async findComplianceDocuments(
    @graphql.Parent() parent: Dispatcher,
    @graphql.Args() args: ComplianceDocumentFindManyArgs
  ): Promise<ComplianceDocument[]> {
    const results = await this.service.findComplianceDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LoadOffer], { name: "loadOffers" })
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "read",
    possession: "any",
  })
  async findLoadOffers(
    @graphql.Parent() parent: Dispatcher,
    @graphql.Args() args: LoadOfferFindManyArgs
  ): Promise<LoadOffer[]> {
    const results = await this.service.findLoadOffers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Message], { name: "messages" })
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findMessages(
    @graphql.Parent() parent: Dispatcher,
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    const results = await this.service.findMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: Dispatcher,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: Dispatcher,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
