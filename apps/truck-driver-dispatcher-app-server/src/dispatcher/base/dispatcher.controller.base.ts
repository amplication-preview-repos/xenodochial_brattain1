/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DispatcherService } from "../dispatcher.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DispatcherCreateInput } from "./DispatcherCreateInput";
import { Dispatcher } from "./Dispatcher";
import { DispatcherFindManyArgs } from "./DispatcherFindManyArgs";
import { DispatcherWhereUniqueInput } from "./DispatcherWhereUniqueInput";
import { DispatcherUpdateInput } from "./DispatcherUpdateInput";
import { ComplianceDocumentFindManyArgs } from "../../complianceDocument/base/ComplianceDocumentFindManyArgs";
import { ComplianceDocument } from "../../complianceDocument/base/ComplianceDocument";
import { ComplianceDocumentWhereUniqueInput } from "../../complianceDocument/base/ComplianceDocumentWhereUniqueInput";
import { LoadOfferFindManyArgs } from "../../loadOffer/base/LoadOfferFindManyArgs";
import { LoadOffer } from "../../loadOffer/base/LoadOffer";
import { LoadOfferWhereUniqueInput } from "../../loadOffer/base/LoadOfferWhereUniqueInput";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { MessageWhereUniqueInput } from "../../message/base/MessageWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DispatcherControllerBase {
  constructor(
    protected readonly service: DispatcherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dispatcher })
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDispatcher(
    @common.Body() data: DispatcherCreateInput
  ): Promise<Dispatcher> {
    return await this.service.createDispatcher({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        nationalId: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Dispatcher] })
  @ApiNestedQuery(DispatcherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dispatchers(@common.Req() request: Request): Promise<Dispatcher[]> {
    const args = plainToClass(DispatcherFindManyArgs, request.query);
    return this.service.dispatchers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        nationalId: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dispatcher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dispatcher(
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<Dispatcher | null> {
    const result = await this.service.dispatcher({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        nationalId: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dispatcher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDispatcher(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() data: DispatcherUpdateInput
  ): Promise<Dispatcher | null> {
    try {
      return await this.service.updateDispatcher({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          nationalId: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dispatcher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDispatcher(
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<Dispatcher | null> {
    try {
      return await this.service.deleteDispatcher({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          nationalId: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/complianceDocuments")
  @ApiNestedQuery(ComplianceDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "read",
    possession: "any",
  })
  async findComplianceDocuments(
    @common.Req() request: Request,
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<ComplianceDocument[]> {
    const query = plainToClass(ComplianceDocumentFindManyArgs, request.query);
    const results = await this.service.findComplianceDocuments(params.id, {
      ...query,
      select: {
        createdAt: true,

        dispatcher: {
          select: {
            id: true,
          },
        },

        documentType: true,
        documentUrl: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
        verified: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complianceDocuments")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async connectComplianceDocuments(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        connect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complianceDocuments")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async updateComplianceDocuments(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        set: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complianceDocuments")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async disconnectComplianceDocuments(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loadOffers")
  @ApiNestedQuery(LoadOfferFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "read",
    possession: "any",
  })
  async findLoadOffers(
    @common.Req() request: Request,
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<LoadOffer[]> {
    const query = plainToClass(LoadOfferFindManyArgs, request.query);
    const results = await this.service.findLoadOffers(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        description: true,

        dispatcher: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loadOffers")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async connectLoadOffers(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: LoadOfferWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loadOffers: {
        connect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loadOffers")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async updateLoadOffers(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: LoadOfferWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loadOffers: {
        set: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loadOffers")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async disconnectLoadOffers(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: LoadOfferWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loadOffers: {
        disconnect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/messages")
  @ApiNestedQuery(MessageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findMessages(
    @common.Req() request: Request,
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<Message[]> {
    const query = plainToClass(MessageFindManyArgs, request.query);
    const results = await this.service.findMessages(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,

        dispatcher: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async connectMessages(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        connect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async updateMessages(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        set: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async disconnectMessages(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        disconnect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        createdAt: true,

        dispatcher: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        message: true,
        sentAt: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async connectNotifications(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async updateNotifications(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async disconnectNotifications(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: DispatcherWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,

        dispatcher: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        escrow: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: DispatcherWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateDispatcher({
      where: params,
      data,
      select: { id: true },
    });
  }
}
