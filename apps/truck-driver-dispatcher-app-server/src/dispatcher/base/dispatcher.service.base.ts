/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Dispatcher as PrismaDispatcher,
  ComplianceDocument as PrismaComplianceDocument,
  LoadOffer as PrismaLoadOffer,
  Message as PrismaMessage,
  Notification as PrismaNotification,
  Payment as PrismaPayment,
} from "@prisma/client";

export class DispatcherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DispatcherCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dispatcher.count(args);
  }

  async dispatchers(
    args: Prisma.DispatcherFindManyArgs
  ): Promise<PrismaDispatcher[]> {
    return this.prisma.dispatcher.findMany(args);
  }
  async dispatcher(
    args: Prisma.DispatcherFindUniqueArgs
  ): Promise<PrismaDispatcher | null> {
    return this.prisma.dispatcher.findUnique(args);
  }
  async createDispatcher(
    args: Prisma.DispatcherCreateArgs
  ): Promise<PrismaDispatcher> {
    return this.prisma.dispatcher.create(args);
  }
  async updateDispatcher(
    args: Prisma.DispatcherUpdateArgs
  ): Promise<PrismaDispatcher> {
    return this.prisma.dispatcher.update(args);
  }
  async deleteDispatcher(
    args: Prisma.DispatcherDeleteArgs
  ): Promise<PrismaDispatcher> {
    return this.prisma.dispatcher.delete(args);
  }

  async findComplianceDocuments(
    parentId: string,
    args: Prisma.ComplianceDocumentFindManyArgs
  ): Promise<PrismaComplianceDocument[]> {
    return this.prisma.dispatcher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .complianceDocuments(args);
  }

  async findLoadOffers(
    parentId: string,
    args: Prisma.LoadOfferFindManyArgs
  ): Promise<PrismaLoadOffer[]> {
    return this.prisma.dispatcher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loadOffers(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.dispatcher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.dispatcher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.dispatcher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
