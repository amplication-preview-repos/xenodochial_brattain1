/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LoadOffer } from "./LoadOffer";
import { LoadOfferCountArgs } from "./LoadOfferCountArgs";
import { LoadOfferFindManyArgs } from "./LoadOfferFindManyArgs";
import { LoadOfferFindUniqueArgs } from "./LoadOfferFindUniqueArgs";
import { CreateLoadOfferArgs } from "./CreateLoadOfferArgs";
import { UpdateLoadOfferArgs } from "./UpdateLoadOfferArgs";
import { DeleteLoadOfferArgs } from "./DeleteLoadOfferArgs";
import { Dispatcher } from "../../dispatcher/base/Dispatcher";
import { Driver } from "../../driver/base/Driver";
import { LoadOfferService } from "../loadOffer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LoadOffer)
export class LoadOfferResolverBase {
  constructor(
    protected readonly service: LoadOfferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "read",
    possession: "any",
  })
  async _loadOffersMeta(
    @graphql.Args() args: LoadOfferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LoadOffer])
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "read",
    possession: "any",
  })
  async loadOffers(
    @graphql.Args() args: LoadOfferFindManyArgs
  ): Promise<LoadOffer[]> {
    return this.service.loadOffers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LoadOffer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "read",
    possession: "own",
  })
  async loadOffer(
    @graphql.Args() args: LoadOfferFindUniqueArgs
  ): Promise<LoadOffer | null> {
    const result = await this.service.loadOffer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LoadOffer)
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "create",
    possession: "any",
  })
  async createLoadOffer(
    @graphql.Args() args: CreateLoadOfferArgs
  ): Promise<LoadOffer> {
    return await this.service.createLoadOffer({
      ...args,
      data: {
        ...args.data,

        dispatcher: args.data.dispatcher
          ? {
              connect: args.data.dispatcher,
            }
          : undefined,

        driver: args.data.driver
          ? {
              connect: args.data.driver,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LoadOffer)
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "update",
    possession: "any",
  })
  async updateLoadOffer(
    @graphql.Args() args: UpdateLoadOfferArgs
  ): Promise<LoadOffer | null> {
    try {
      return await this.service.updateLoadOffer({
        ...args,
        data: {
          ...args.data,

          dispatcher: args.data.dispatcher
            ? {
                connect: args.data.dispatcher,
              }
            : undefined,

          driver: args.data.driver
            ? {
                connect: args.data.driver,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LoadOffer)
  @nestAccessControl.UseRoles({
    resource: "LoadOffer",
    action: "delete",
    possession: "any",
  })
  async deleteLoadOffer(
    @graphql.Args() args: DeleteLoadOfferArgs
  ): Promise<LoadOffer | null> {
    try {
      return await this.service.deleteLoadOffer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Dispatcher, {
    nullable: true,
    name: "dispatcher",
  })
  @nestAccessControl.UseRoles({
    resource: "Dispatcher",
    action: "read",
    possession: "any",
  })
  async getDispatcher(
    @graphql.Parent() parent: LoadOffer
  ): Promise<Dispatcher | null> {
    const result = await this.service.getDispatcher(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Driver, {
    nullable: true,
    name: "driver",
  })
  @nestAccessControl.UseRoles({
    resource: "Driver",
    action: "read",
    possession: "any",
  })
  async getDriver(@graphql.Parent() parent: LoadOffer): Promise<Driver | null> {
    const result = await this.service.getDriver(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
