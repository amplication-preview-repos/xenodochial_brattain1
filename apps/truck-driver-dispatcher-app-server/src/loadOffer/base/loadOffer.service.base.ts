/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LoadOffer as PrismaLoadOffer,
  Dispatcher as PrismaDispatcher,
  Driver as PrismaDriver,
} from "@prisma/client";

export class LoadOfferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LoadOfferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.loadOffer.count(args);
  }

  async loadOffers(
    args: Prisma.LoadOfferFindManyArgs
  ): Promise<PrismaLoadOffer[]> {
    return this.prisma.loadOffer.findMany(args);
  }
  async loadOffer(
    args: Prisma.LoadOfferFindUniqueArgs
  ): Promise<PrismaLoadOffer | null> {
    return this.prisma.loadOffer.findUnique(args);
  }
  async createLoadOffer(
    args: Prisma.LoadOfferCreateArgs
  ): Promise<PrismaLoadOffer> {
    return this.prisma.loadOffer.create(args);
  }
  async updateLoadOffer(
    args: Prisma.LoadOfferUpdateArgs
  ): Promise<PrismaLoadOffer> {
    return this.prisma.loadOffer.update(args);
  }
  async deleteLoadOffer(
    args: Prisma.LoadOfferDeleteArgs
  ): Promise<PrismaLoadOffer> {
    return this.prisma.loadOffer.delete(args);
  }

  async getDispatcher(parentId: string): Promise<PrismaDispatcher | null> {
    return this.prisma.loadOffer
      .findUnique({
        where: { id: parentId },
      })
      .dispatcher();
  }

  async getDriver(parentId: string): Promise<PrismaDriver | null> {
    return this.prisma.loadOffer
      .findUnique({
        where: { id: parentId },
      })
      .driver();
  }
}
